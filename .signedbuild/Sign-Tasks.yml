parameters:
- name: PublishExtension
  type: boolean
  default: false
- name: ExtensionVersion
  type: string
  default: ''
- name: RepositoryName
  type: string
  default: ''
- name: UpdateTaskVersion
  type: boolean
  default: false

# This pipeline is used to build and sign the Task Extensions for Azure DevOps.
stages:
- stage: BuildPackageTaskExtension
  displayName: Build and Package Task Extensions
  jobs:
  - job: BuildPackageTaskExtension
    displayName: Build and Package Task Extensions
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Unisgned VSIX'
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: unsigned-vsix

    steps:
    - checkout: self
      clean: true
      fetchTags: false

    - checkout: TaskExtensions
      clean: true
      fetchTags: false
      path: s/TaskExtensions

    - task: UseNode@1
      displayName: Use Node
      inputs:
        version: '20.14.0'

    - script: |
        npm run initdev
      displayName: 'Install Node dependencies'
      workingDirectory: '$(System.DefaultWorkingDirectory)/TaskExtensions'

    - task: PowerShell@2
      displayName: 'Grab the latest version of vswhere.exe'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/TaskExtensions'
        script: |
          $vswhereLatest = "https://github.com/Microsoft/vswhere/releases/latest/download/vswhere.exe"

          $targets = @(
            ".\BuildTasks\PublishVSExtension\v4\tools\",
            ".\BuildTasks\PublishVSExtension\v5\tools\"
            ".\BuildTasks\PublishVSExtension\v5\PublishVSExtension\v5\tools\"
          )

          invoke-webrequest $vswhereLatest -OutFile $env:temp\vswhere.exe

          $targets | %{
            mkdir $_ -force | out-null
            copy $env:temp\vswhere.exe $_ -force
          }

    - task: Npm@1
      displayName: 'Build the extension'
      inputs:
        command: custom
        verbose: false
        workingDir: '$(System.DefaultWorkingDirectory)/TaskExtensions'
        customCommand: 'run build'

    - task: Npm@1
      displayName: 'Prepare the extension'
      inputs:
        command: custom
        verbose: false
        workingDir: '$(System.DefaultWorkingDirectory)/TaskExtensions'
        customCommand: 'run package'

    - pwsh: |
        $erroractionpreference = "continue"
        del BuildTasks\PublishExtension\v5\node_modules\7zip-bin\linux -recurse
        del BuildTasks\PublishExtension\v5\node_modules\7zip-bin\mac -recurse
        del -include @(
            "package-lock.json",
            "*.ts",
            ".taskkey",
            "tsconfig.json",
            ".snyk",
            "*.md",
            "tsconfig.tsbuildinfo"
        ) -recurse BuildTasks\*\v*

        del -include @(
            ".package-lock.json",
            "*.map",
            ".github",
            "@types",
            ".eslintrc",
            ".nycrc",
            "fixtures",
            "test",
            "tests",
            ".editorconfig",
            ".travis.yml",
            ".jshintrc",
            ".jscsrc",
            "CODEOWNERS",
            "doc",
            "CHANGELOG",
            "Makefile",
            "LICENSE-MIT"
        ) -recurse BuildTasks\*\v*\node_modules -force  
      displayName: 'Delete unneeded files'
      workingDirectory: '$(System.DefaultWorkingDirectory)/TaskExtensions'

    - task: TfxInstaller@5
      displayName: 'Use Node CLI for Azure DevOps'
      inputs:
        version: '0.x'
        checkLatest: true

    - task: QueryAzureDevOpsExtensionVersion@5
      displayName: 'Query Azure DevOps Extension Version - dev'
      name: QueryVersion
      inputs:
        connectTo: 'AzureRM'
        connectedServiceNameAzureRM: 'PublishSignedExtensions'
        publisherId: 'ms-devlabs'
        extensionId: 'vsts-developer-tools-build-tasks'
        extensionTag: '-dev'
        versionAction: 'Patch'
        extensionVersionOverride: '${{parameters.ExtensionVersion}}'
        setBuildNumber: 'true'
        cwd: '$(System.DefaultWorkingDirectory)/TaskExtensions'
      continueOnError: true

    - task: PackageAzureDevOpsExtension@5
      displayName: 'Package Build Extension'
      name: 'packagebuild'
      inputs:
        rootFolder: '$(System.DefaultWorkingDirectory)/TaskExtensions'
        outputPath: '$(Build.ArtifactStagingDirectory)\vsts-developer-tools-build-tasks-build.vsix'
        publisherId: 'ms-devlabs'
        extensionId: 'vsts-developer-tools-build-tasks'
        extensionTag: '-build'
        extensionName: 'Azure DevOps Extension Tasks (Dev)'
        ${{ if ne(parameters.ExtensionVersion, '') }}:
          extensionVersion: '${{parameters.ExtensionVersion}}'
        ${{ if eq(parameters.ExtensionVersion, '') }}:
          extensionVersion: '$(QueryVersion.Extension.Version)'
        updateTasksVersion: ${{ parameters.UpdateTaskVersion }}
        updateTasksVersionType: patch
        extensionVisibility: private

    - task: PackageAzureDevOpsExtension@5
      name: 'packageprivate'
      displayName: 'Package Private Extension'
      inputs:
        rootFolder: '$(System.DefaultWorkingDirectory)/TaskExtensions'
        outputPath: '$(Build.ArtifactStagingDirectory)\vsts-developer-tools-build-tasks-private.vsix'
        publisherId: 'ms-devlabs'
        extensionName: 'Azure DevOps Extension Tasks (Test)'
        extensionId: 'vsts-developer-tools-build-tasks'
        ${{ if ne(parameters.ExtensionVersion, '') }}:
          extensionVersion: '${{parameters.ExtensionVersion}}'
        ${{ if eq(parameters.ExtensionVersion, '') }}:
          extensionVersion: '$(QueryVersion.Extension.Version)'
        extensionTag: '-dev'
        extensionVisibility: 'private'

    - task: PackageAzureDevOpsExtension@5
      displayName: 'Package Public Extension'
      name: 'packagepublic'
      inputs:
        rootFolder: '$(System.DefaultWorkingDirectory)/TaskExtensions'
        outputPath: '$(Build.ArtifactStagingDirectory)\vsts-developer-tools-build-tasks-public.vsix'
        publisherId: 'ms-devlabs'
        extensionName: 'Azure DevOps Extension Tasks'
        extensionId: 'vsts-developer-tools-build-tasks'
        ${{ if ne(parameters.ExtensionVersion, '') }}:
          extensionVersion: '${{parameters.ExtensionVersion}}'
        ${{ if eq(parameters.ExtensionVersion, '') }}:
          extensionVersion: '$(QueryVersion.Extension.Version)'
        extensionVisibility: 'public'
        updateTasksVersion: ${{ parameters.UpdateTaskVersion }}
        updateTasksVersionType: patch

- stage: PublishDev
  displayName: 'Publish Privately'
  dependsOn: BuildPackageTaskExtension
  condition: succeeded()
  jobs:
  - job: DeployDev
    displayName: 'Deploy to Dev'
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Signed Vsix'
        targetPath: '$(System.ArtifactsDirectory)/signed-vsix'
        artifactName: signed-vsix-dev
    steps:
    - download: current
      artifact: unsigned-vsix

    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - task: TfxInstaller@5
      displayName: 'Install TfxInstaller'
      inputs:
        version: '0.x'
        checkLatest: true

    - template: CentralScripts/sign.yml
      parameters:
        rootPath: $(Pipeline.Workspace)\unsigned-vsix

    - ${{ if eq(parameters.publishExtension, true) }}:
      - task: 1ES.PublishAzureDevOpsExtension@1
        displayName: 'Publish the private extension to ms-devlabs'
        inputs:
          connectedServiceNameAzureRM: 'PublishSignedExtensions'
          fileType: 'vsix'
          vsixFile: '$(System.ArtifactsDirectory)/signed-vsix/vsts-developer-tools-build-tasks-private.vsix'
          targetPath: '$(System.ArtifactsDirectory)'
          validateExtension: false
          useV5: true

    - ${{ if eq(parameters.publishExtension, true) }}:
      - task: IsAzureDevOpsExtensionValid@5
        displayName: 'Validate the private extension on the marketplace'
        inputs:
          connectTo: 'AzureRM'
          connectedServiceNameAzureRM: 'PublishSignedExtensions'
          method: 'vsix'
          vsixFile: '$(System.ArtifactsDirectory)/signed-vsix/vsts-developer-tools-build-tasks-private.vsix'

- stage: PublishProd
  displayName: 'Publish publicly to MsDevLabs'
  dependsOn: PublishDev
  condition: succeeded()
  jobs:
  - job: DeployProd
    displayName: 'Deploy to Prod'
    templateContext:
      outputs:
      - output: pipelineArtifact
        displayName: 'Publish Signed Vsix'
        targetPath: '$(System.ArtifactsDirectory)/signed-vsix'
        artifactName: signed-vsix-prod
    steps:
    - download: current
      artifact: unsigned-vsix

    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - task: TfxInstaller@5
      displayName: 'Use Node CLI for Azure DevOps'
      inputs:
        version: '0.x'
        checkLatest: true

    - template: CentralScripts/sign.yml
      parameters:
        rootPath: $(Pipeline.Workspace)\unsigned-vsix

    - ${{ if eq(parameters.publishExtension, true) }}:
      - task: 1ES.PublishAzureDevOpsExtension@1
        displayName: 'Publish the public extension to ms-devlabs'
        inputs:
          connectTo: 'AzureRM'
          connectedServiceNameAzureRM: 'PublishSignedExtensions'
          fileType: 'vsix'
          vsixFile: '$(System.ArtifactsDirectory)/signed-vsix/vsts-developer-tools-build-tasks-public.vsix'
          targetPath: '$(System.ArtifactsDirectory)'
          validateExtension: false
          useV5: true

    - ${{ if eq(parameters.publishExtension, true) }}:
      - task: IsAzureDevOpsExtensionValid@5
        displayName: 'Validate the public extension on the marketplace'
        inputs:
          connectTo: 'AzureRM'
          connectedServiceNameAzureRM: 'PublishSignedExtensions'
          method: 'vsix'
          vsixFile: '$(System.ArtifactsDirectory)/signed-vsix/vsts-developer-tools-build-tasks-public.vsix'

    - ${{ if eq(parameters.publishExtension, true) }}:
      - task: GitHubRelease@1
        displayName: 'Publish the public extension to GitHub'
        inputs:
          gitHubConnection: 'ADOExtensionAPIGHToken2'
          repositoryName: '${{ parameters.RepositoryName }}'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'userSpecifiedTag'
          tag: 'v$(Build.BuildNumber)'
          title: 'v$(Build.BuildNumber)'
          releaseNotesSource: 'inline'
          assets: '$(publishProd.Extension.OutputPath)*'
          changeLogCompareToRelease: 'lastFullRelease'
          changeLogType: 'issueBased'
          changeLogLabels: '[{ "state" : "closed" }]'
