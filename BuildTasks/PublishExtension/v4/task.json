{
  "id": "631511B4-50AB-47C8-B766-7AE2AA672733",
  "name": "PublishAzureDevOpsExtension",
  "friendlyName": "Publish Extension",
  "description": "Publish an Azure DevOps extension to the Visual Studio Marketplace",
  "author": "Microsoft Corporation",
  "helpMarkDown": "",
  "category": "Deploy",
  "version": {
    "Major": 4,
    "Minor": 4,
    "Patch": 0
  },
  "visibility": [
    "Build",
    "Release"
  ],
  "demands": [
    "npm"
  ],
  "minimumAgentVersion": "2.206.1",
  "groups": [
    {
      "name": "manifest",
      "displayName": "Extension manifest",
      "isExpanded": true
    },
    {
      "name": "advanced",
      "displayName": "Advanced",
      "isExpanded": false
    },
    {
      "name": "backcompat",
      "displayName": "Backward Compatibility",
      "isExpanded": false
    }
  ],
  "instanceNameFormat": "Publish Extension",
  "inputs": [
    {
      "name": "connectTo",
      "type": "radio",
      "label": "Connect to",
      "required": true,
      "defaultValue": "VsTeam",
      "helpMarkDown": "Publish to Visual Studio Marketplace or a local Azure DevOps Server.",
      "options": {
        "VsTeam": "Visual Studio Marketplace",
        "TFS": "Azure DevOps Server"
      }
    },
    {
      "name": "connectedServiceName",
      "type": "connectedService:VstsMarketplacePublishing",
      "label": "Visual Studio Marketplace connection",
      "required": true,
      "helpMarkDown": "Service endpoint connection to install the extension.",
      "visibleRule": "connectTo=VsTeam"
    },
    {
      "name": "connectedServiceNameTFS",
      "type": "connectedService:TFSMarketplacePublishing",
      "label": "TFS Local Gallery connection",
      "required": true,
      "helpMarkDown": "Service endpoint connection to install the extension.",
      "visibleRule": "connectTo=TFS"
    },
    {
      "name": "fileType",
      "type": "radio",
      "label": "Input file type",
      "required": true,
      "defaultValue": "manifest",
      "options": {
        "manifest": "Extension manifest file",
        "vsix": "VSIX file"
      },
      "groupName": "manifest"
    },
    {
      "name": "vsixFile",
      "type": "filePath",
      "label": "VSIX file",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "VSIX file to publish. Supports wildcards.",
      "visibleRule": "fileType = vsix",
      "groupName": "manifest"
    },
    {
      "name": "rootFolder",
      "type": "filePath",
      "label": "Root manifest folder",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Folder where manifest file(s) exist.",
      "visibleRule": "fileType = manifest",
      "groupName": "manifest"
    },
    {
      "name": "localizationRoot",
      "type": "filePath",
      "label": "Localization Root folder",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Folder where localization file(s) exist.",
      "visibleRule": "fileType = manifest",
      "groupName": "manifest"
    },
    {
      "name": "patternManifest",
      "type": "multiLine",
      "properties": {
        "resizable": true,
        "rows": "1"
      },
      "label": "Manifest file(s)",
      "defaultValue": "vss-extension.json",
      "required": false,
      "helpMarkDown": "Specify the pattern for manifest files. One file per line.",
      "visibleRule": "fileType = manifest",
      "groupName": "manifest"
    },
    {
      "name": "publisherId",
      "type": "string",
      "label": "Publisher ID",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Extension publisher ID. If not specified, the publisher specified in the manifest will be used.",
      "groupName": "manifest"
    },
    {
      "name": "extensionId",
      "type": "string",
      "label": "Extension ID",
      "defaultValue": "",
      "helpMarkDown": "Overrides extension ID. If not specified, the extension ID specified in the manifest will be used",
      "required": false,
      "groupName": "manifest"
    },
    {
      "name": "extensionTag",
      "type": "string",
      "label": "Extension Tag",
      "defaultValue": "",
      "helpMarkDown": "Extension Tag to append to the extension ID",
      "required": false,
      "groupName": "manifest"
    },
    {
      "name": "extensionName",
      "type": "string",
      "label": "Extension name",
      "defaultValue": "",
      "helpMarkDown": "Overrides extension name. If not specified, the extension name specified in the manifest will be used",
      "required": false,
      "groupName": "manifest"
    },
    {
      "name": "extensionVersion",
      "type": "string",
      "label": "Extension version",
      "defaultValue": "",
      "helpMarkDown": "Overrides extension version. If not specified, the extension version specified in the manifest will be used",
      "required": false,
      "groupName": "manifest"
    },
    {
      "name": "updateTasksVersion",
      "type": "boolean",
      "label": "Override task version",
      "defaultValue": "true",
      "required": false,
      "helpMarkDown": "Search for contributed tasks in extension manifests and updates the version specified in each Build and Release task found.",
      "groupName": "manifest"
    },
    {
      "name": "updateTasksVersionType",
      "type": "pickList",
      "label": "Override Type",
      "defaultValue": "major",
      "options": {
        "major": "Replace Major, Minor, Patch (x.y.r)",
        "minor": "Replace Minor, Patch (1.y.r)",
        "patch": "Replace Only Patch (1.0.r)"
      },
      "required": false,
      "helpMarkDown": "The Task version replacement format. You can select which part(s) of the version number to update (Major (x.y.r), Minor (1.y.r), or Patch (1.0.r)). The value (x.y.r) is taken from the Extension Version input or the extension manifest.",
      "visibleRule": "updateTasksVersion=true",
      "groupName": "manifest"
    },
    {
      "name": "updateTasksId",
      "type": "boolean",
      "label": "Override task id",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Search for contributed tasks in extension manifests and updates the id specified in each Build and Release task found based on the Publisher, ExtensionId and TaskName.",
      "groupName": "manifest"
    },
    {
      "name": "extensionVisibility",
      "type": "pickList",
      "label": "Extension visibility",
      "defaultValue": "default",
      "helpMarkDown": "Overrides extension visibility (Public vs Private) and optionally adds the Preview flag. If not specified, the extension visibility specified in the manifest will be used",
      "required": false,
      "options": {
        "default": "Not set",
        "private": "Private",
        "privatepreview": "Private Preview",
        "publicpreview": "Public Preview",
        "public": "Public"
      },
      "groupName": "manifest"
    },
    {
      "name": "extensionPricing",
      "type": "pickList",
      "label": "Extension pricing",
      "defaultValue": "default",
      "helpMarkDown": "Overrides extension pricing (Free vs Paid). If not specified, the extension pricing specified in the manifest will be used",
      "required": false,
      "groupName": "manifest",
      "options": {
        "default": "Not set",
        "free": "Free",
        "paid": "Paid"
      }
    },
    {
      "name": "outputVariable",
      "type": "string",
      "label": "Output Variable (deprecated)",
      "defaultValue": "Extension.OutputPath",
      "required": false,
      "helpMarkDown": "The variable name to assign the location of the generated package to. Specify only the name, e.g.: `Extension.OutputPath`, not `$(Extension.OutputPath)`.",
      "groupName": "backcompat"
    },
    {
      "name": "shareWith",
      "type": "string",
      "label": "Share with",
      "defaultValue": "",
      "helpMarkDown": "Comma separated list of organisations with which to share the extension if it's private (e.g. org_x,org_y,org_z). Share is ignored for public extensions and when publishing to TFS.",
      "required": false,
      "groupName": "manifest",
      "visibleRule": "extensionVisibility = private || extensionVisibility = privatepreview || extensionVisibility = default"
    },
    {
      "name": "bypassLocalValidation",
      "type": "boolean",
      "label": "Bypass local validation",
      "defaultValue": "false",
      "helpMarkDown": "Bypass local validation.",
      "required": false,
      "groupName": "advanced"
    },
    {
      "name": "noWaitValidation",
      "type": "boolean",
      "label": "Don't wait for validation",
      "defaultValue": "false",
      "helpMarkDown": "Don't block command for extension validation.",
      "required": false,
      "groupName": "advanced"
    },
    {
      "name": "arguments",
      "type": "string",
      "label": "Arguments",
      "defaultValue": "",
      "helpMarkDown": "Additional arguments passed to the package and publishing tool.",
      "required": false,
      "groupName": "advanced"
    },
    {
      "name": "cwd",
      "type": "filePath",
      "label": "Working Directory",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Working directory to run the package and publishing process from. Defaults to the folder where the manifest is located.",
      "groupName": "advanced"
    }
  ],
  "outputVariables": [
    {
        "name": "Extension.OutputPath",
        "description": "Is set with the generated vsix path."
    }
  ],
  "execution": {
    "Node16": {
      "target": "PublishExtension/v4/PublishExtension.js",
      "argumentFormat": ""
    }
  }
}
